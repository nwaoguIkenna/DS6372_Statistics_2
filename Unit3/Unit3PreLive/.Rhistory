ggplot(sumstats,aes(x=Background,y=Mean,group=Sex,colour=Sex))+
ylab("ACT Score")+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=Mean-SE,ymax=Mean+SE),width=.1)
ggplot(sumstats,aes(x=Background,y=Mean,group=Sex,colour=Sex))+
ylab("ACT Score")+
geom_line()+
geom_point()+
geom_errorbar(aes(ymin=Mean-SD,ymax=Mean+SD),width=.1)
#Running ANOVA model with interaction term
mymodel<-lm(Score~Background+Sex+Backgroung:Sex,data=ACT)
#Running ANOVA model with interaction term
mymodel<-lm(Score~Background+Sex+Background:Sex,data=ACT)
#Lets look at residuals first as no testing really matters yet.
par(mfrow=c(2,2))
plot(mymodel)
attributes(mymodel)
ggplot(mymodel,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_smooth(method = "loess", size = 1.5))
ggplot(mymodel,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_smooth(method = "loess", size = 1.5)
myfits<-data.frame(fitted.values=mymodel$fitted.values,residuals=mymodel$residuals)
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_smooth(method = "loess", size = 1.5)
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+points()
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()+geom_smooth(method = "loess", size = 1.5)
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()+geom_smooth(method = "loess", size = 1)
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()+geom_smooth(method = "loess", size = .5)
ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()
#QQ plot of residuals
ggplot(myfits,aes(y=residuals))+stat_qq()+stat_qq_line()
#QQ plot of residuals
ggplot(myfits,aes(sample=residuals))+stat_qq()+stat_qq_line()
#QQ plot of residuals
ggplot(myfits,aes(sample=residuals))+
stat_qq()+
stat_qq_line()
#QQ plot of residuals
ggplot(myfits,aes(sample=residuals))+
stat_qq()
?stat_qq_line
#QQ plot of residuals
ggplot(myfits,aes(sample=residuals))+
stat_qq()+geom_abline(intercept=mean(residuals), slope = sd(residuals))
#QQ plot of residuals
ggplot(myfits,aes(sample=residuals))+
stat_qq()+geom_abline(intercept=mean(myfits$residuals), slope = sd(myfits$residuals))
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(binwidth=1,color="black", fill="gray")
ggplot(myfits, aes(x=residuals)) +
geom_histogram(binwidth=1,color="black", fill="gray")+
geom_density(alpha=.2, fill="#FF6666")
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.2, fill="#FF6666")
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.4, fill="#FF6666")
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.4, fill="lightblue")
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_density(alpha=.4, fill="lightblue")+
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")
?geom_density
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.1, fill="lightblue")
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.1, fill="lightred")
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.1, fill="lightred")
#Histogram of residuals
ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.1, fill="red")
library(gridExtra)
#Residual vs Fitted
plot1<-ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()
plot1
#QQ plot of residuals  #Note the diagonal abline is only good for qqplots of normal data.
plot2<-ggplot(myfits,aes(sample=residuals))+
stat_qq()+geom_abline(intercept=mean(myfits$residuals), slope = sd(myfits$residuals))
plot2
#Histogram of residuals
plot3<-ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.1, fill="red")
plot3
library(gridExtra)
grid.arrange(plot1, plot2,plot3, ncol=3)
?hatvalues
#Note for you guys who want to make a residuals versus leverage plot
#for regression purposes, you just need to add an additional column
#to the myfits data frame using  hatvalues(mymodel) to obtain the leverage values.
#I'll let you figure it out in ggplot2
myfits$leverage<-hatvalues(mymodel)
plot(myfits$leverage,myfits$residulas)
#Note for you guys who want to make a residuals versus leverage plot
#for regression purposes, you just need to add an additional column
#to the myfits data frame using  hatvalues(mymodel) to obtain the leverage values.
#I'll let you figure it out in ggplot2
par(mfrow=c(1,1))
myfits$leverage<-hatvalues(mymodel)
plot(myfits$leverage,myfits$residulas)
plot(myfits$leverage,myfits$residuals)
?Anova
Anova(mymodel,type=3)
#If you wnat the type I for some reason you can get that using
#the standard anova call
anova(mymodel)
?TukeyHSD
TukeyHSD(mymodel,"Sex")
Anova(mymodel,type=3,contrasts=list(topic=contr.sum, sys=contr.sum))
summary(mymodel)
#Running ANOVA model with interaction term
mymodel<-lm(Score~Background+Sex+Background:Sex-1,data=ACT)
summary(mymodel)
myfits<-data.frame(fitted.values=mymodel$fitted.values,residuals=mymodel$residuals)
#Residual vs Fitted
plot1<-ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()
plot1
#QQ plot of residuals  #Note the diagonal abline is only good for qqplots of normal data.
plot2<-ggplot(myfits,aes(sample=residuals))+
stat_qq()+geom_abline(intercept=mean(myfits$residuals), slope = sd(myfits$residuals))
plot2
#Histogram of residuals
plot3<-ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.1, fill="red")
plot3
library(gridExtra)
grid.arrange(plot1, plot2,plot3, ncol=3)
Anova(mymodel,type=3,contrasts=list(topic=contr.sum, sys=contr.sum))
Anova(mymodel,type=3)
#Running ANOVA model with interaction term
mymodel<-lm(Score~Background+Sex+Background:Sex,data=ACT)
Anova(mymodel,type=3)
Anova(mymodel,type=3,contrasts=list(topic=contr.sum, sys=contr.sum))
summary(mymodel)
#Running ANOVA model with interaction term
options(contrasts=c("contr.sum","contr.poly"))
mymodel<-lm(Score~Background+Sex+Background:Sex,data=ACT)
Anova(mymodel,type=3)
#If you wnat the type I for some reason you can get that using
#the standard anova call.  You can verify that the only fstatistic
#that corresponds between the two tables is the last one.
anova(mymodel)
TukeyHSD(mymodel,"Sex")
#Running ANOVA model with interaction term
#Note the options command is to ensure we get our type III
#sums of squares correct.  There is some technical detail there
#but as long as you do it before running the model you are okay.
options(contrasts=c("contr.sum","contr.poly"))
mymodel<-aov(Score~Background+Sex+Background:Sex,data=ACT)
myfits<-data.frame(fitted.values=mymodel$fitted.values,residuals=mymodel$residuals)
#Residual vs Fitted
plot1<-ggplot(myfits,aes(x=fitted.values,y=residuals))+ylab("Residuals")+
xlab("Predicted")+geom_point()
plot1
#QQ plot of residuals  #Note the diagonal abline is only good for qqplots of normal data.
plot2<-ggplot(myfits,aes(sample=residuals))+
stat_qq()+geom_abline(intercept=mean(myfits$residuals), slope = sd(myfits$residuals))
plot2
#Histogram of residuals
plot3<-ggplot(myfits, aes(x=residuals)) +
geom_histogram(aes(y=..density..),binwidth=1,color="black", fill="gray")+
geom_density(alpha=.1, fill="red")
plot3
Anova(mymodel,type=3)
#If you wnat the type I for some reason you can get that using
#the standard anova call.  You can verify that the only fstatistic
#that corresponds between the two tables is the last one.
anova(mymodel)
TukeyHSD(mymodel,"Sex")
?TukeyHSD
TukeyHSD(mymodel,"Sex",conf.level=.95)
plot(TukeyHSD(mymodel,"Sex",conf.level=.95))
#In this example there is no sig. interaction so we may want to just
#compare each factor seperately with multilpe test corrections.
#If we have no specific comparisons then we just want to look at everything.
#Note if there are a lot of comparisons, the results can be quite conservative.
TukeyHSD(mymodel,"Background",conf.level=.95)
plot(TukeyHSD(mymodel,"Background",conf.level=.95))
library(multcomp)
coef(mymodel)
#There are other approaches to get at comparisons within a single factor
#but the above tool is handy for two way anova scenarios an
TukeyHSD(mymodel,"Background:Sex",conf.level=.95)
plot(TukeyHSD(mymodel,"Background:Sex",conf.level=.95))
TukeyHSD(mymodel,"Background:Sex",conf.level=.95)
plot(TukeyHSD(mymodel,"Background:Sex",conf.level=.95))
summary(mymodel)
qgen
#Suppose we wanted to conduct test between males vs females at each background level.
library(lsmeans)
help('transition')
install.packages("emmeans")
#Suppose we wanted to conduct test between males vs females at each background level.
library(emmeans)
install.packages("emmeans")
#Suppose we wanted to conduct test between males vs females at each background level.
library(emmeans)
library(lsmeans)
qgen
lsmeans(mymodel)
contrast.factor<-~Background*Sex
contrast<-aMale-aFemale
contrast<-"aMale-aFemale"
#lsmeans(mymodel)
gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
#lsmeans(mymodel)
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(design[, contrast.factor.names[i]])
}
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(ACT[, contrast.factor.names[i]])
}
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
dat<-ACT
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
new.factor.levels
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = contrast, levels = new.factor.levels))))
contrast<-"amale-afemale"
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = contrast, levels = new.factor.levels))))
contrast2
contrast<-c("amale-afemale","bmale-bfemale","cmale-cfemale")
#lsmeans(mymodel)
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = contrast, levels = new.factor.levels))))
contrast2
qgen
?qgen
contrast<-c("amale-afemale")
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = contrast, levels = new.factor.levels))))
contrast2
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast, by = NULL))
lsmeans(mymodel, contrast.factor)
contrast(lsmeans(mymodel, contrast.factor),contrast.factor.2)
contrast(lsmeans(mymodel, contrast.factor),contrast.factor)
contrast.factor
contrast.factor.2
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
contrast.result
dim(contrast.result)
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.  This is a bit messy but it gets the job done. WIP.
final.result<-c()
for( i in 1:length(contrast)){
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = contrast[i], levels = new.factor.levels))))
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
}
final.result
contrast[1]
i=1
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = contrast[i], levels = new.factor.levels))))
contrast
contrast2
new.factor.levels
temp.cont<-contrast[i]
temp.cont
contrast[1]
i=1
contrast[i]
temp.cont<-contrast[i]
temp.cont
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast2
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.  This is a bit messy but it gets the job done. WIP.
final.result<-c()
for( i in 1:length(contrast)){
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
temp.cont<-contrast[i]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
}
final.result
contrast.result
i=1
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.  This is a bit messy but it gets the job done. WIP.
final.result<-c()
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
contrast.factor.2
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
new.factor.levels
temp.cont<-mycontrast[i]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast2
temp.cont
mycontrast
mycontrast<-c("amale-afemale")
temp.cont<-mycontrast[i]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast2
temp.cont
mycontrast
mycontrast[i]
length(mycontrast)
i
i=1
temp.cont<-mycontrast[i]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast2
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
final.result
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.  This is a bit messy but it gets the job done. WIP.
final.result<-c()
for( i in 1:length(contrast)){
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
temp.cont<-mycontrast[i]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
}
final.result
i=1
i
rm(contrast)
contrast.factor<-~Background*Sex
mycontrast<-c("amale-afemale")
dat<-ACT
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.  This is a bit messy but it gets the job done. WIP.
final.result<-c()
for( i in 1:length(mycontrast)){
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
temp.cont<-mycontrast[i]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
}
final.result
contrast.result
contrast2
temp.cont
i
length(mycontrast)
j=1
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.  This is a bit messy but it gets the job done. WIP.
final.result<-c()
for( j in 1:length(mycontrast)){
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
temp.cont<-mycontrast[j]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
}
final.result
TukeyHSD(mymodel,"Background:Sex",conf.level=.95)
mycontrast<-c("amale-afemale","bmale-bfemale","cmale-cfemale")
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.  This is a bit messy but it gets the job done. WIP.
final.result<-c()
for( j in 1:length(mycontrast)){
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
temp.cont<-mycontrast[j]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
}
final.result
final.result$contrast<-mycontrast
?floor
final.result$bonf<-min(c(length(mycontrast)*final.result$p.value,1))
final.result$bonf
final.result$bonf<-length(mycontrast)*final.result$p.value
final.result
final.result$bonf[final.result$bonf>1]<-1
final.result
contrast.factor<-~Background
mycontrast<-c("b-a","c-a","c-b")
dat<-ACT
#Running a loop that determines the appropriate 0's and 1's for each
#contrast specified above.
final.result<-c()
for( j in 1:length(mycontrast)){
contrast.factor.names<-gsub(" ", "", unlist(strsplit(as.character(contrast.factor),split = "*", fixed = T))[-1])
contrast.factor.2 <- vector("list", length(contrast.factor.names))
for (i in 1:length(contrast.factor.names)) {
contrast.factor.2[[i]] <- levels(dat[, contrast.factor.names[i]])
}
new.factor.levels <- do.call(paste, c(do.call(expand.grid,
contrast.factor.2), sep = ""))
temp.cont<-mycontrast[j]
contrast2 <- list(comparison = as.vector(do.call(makeContrasts,
list(contrasts = temp.cont, levels = new.factor.levels))))
contrast.result <- summary(contrast(lsmeans(mymodel,
contrast.factor), contrast2, by = NULL))
final.result<-rbind(final.result,contrast.result)
}
#Cleaning up and applying bonferroni correction to the number
#of total comparisons investigated.
final.result$contrast<-mycontrast
final.result$bonf<-length(mycontrast)*final.result$p.value
final.result$bonf[final.result$bonf>1]<-1
final.result
